name: Dependency Check PoC

on: [push]

permissions:
  issues: write
  contents: read

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Check Test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List directory contents
        run: ls -la

      - name: Detect languages and compile
        run: |
          #!/bin/bash
          echo "Detecting languages in repository..."

          # Initialize flags for detected languages
          JAVA_FOUND=false
          DOTNET_FOUND=false
          JS_FOUND=false
          RUBY_FOUND=false
          PYTHON_FOUND=false
          PHP_FOUND=false
          SWIFT_FOUND=false
          GO_FOUND=false
          RUST_FOUND=false

          # Detect languages based on file extensions
          if ls *.java *.jar *.war *.ear 2>/dev/null || [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
            JAVA_FOUND=true
            echo "Java detected"
          fi
          if ls *.cs *.csproj *.sln 2>/dev/null; then
            DOTNET_FOUND=true
            echo ".NET detected"
          fi
          if ls *.js *.ts package.json yarn.lock 2>/dev/null; then
            JS_FOUND=true
            echo "JavaScript/TypeScript detected"
          fi
          if [ -f "Gemfile" ] || [ -f "Gemfile.lock" ]; then
            RUBY_FOUND=true
            echo "Ruby detected"
          fi
          if ls *.py requirements.txt Pipfile.lock 2>/dev/null; then
            PYTHON_FOUND=true
            echo "Python detected"
          fi
          if ls *.php composer.json composer.lock 2>/dev/null; then
            PHP_FOUND=true
            echo "PHP detected"
          fi
          if [ -f "Podfile" ] || [ -f "Podfile.lock" ]; then
            SWIFT_FOUND=true
            echo "Swift/Objective-C detected"
          fi
          if ls *.go go.mod 2>/dev/null; then
            GO_FOUND=true
            echo "Go detected"
          fi
          if ls *.rs Cargo.toml 2>/dev/null; then
            RUST_FOUND=true
            echo "Rust detected"
          fi

          # Compile or install dependencies based on detected languages
          if [ "$JAVA_FOUND" = true ]; then
            echo "Setting up Java environment..."
            sudo apt-get update
            sudo apt-get install -y openjdk-11-jdk
            if [ -f "pom.xml" ]; then
              echo "Compiling Java with Maven..."
              mvn clean install -B
            elif [ -f "build.gradle" ]; then
              echo "Compiling Java with Gradle..."
              chmod +x gradlew
              ./gradlew build
            fi
          fi

          if [ "$DOTNET_FOUND" = true ]; then
            echo "Setting up .NET environment..."
            sudo apt-get update
            sudo apt-get install -y dotnet-sdk-6.0
            echo "Compiling .NET project..."
            dotnet build
          fi

          if [ "$JS_FOUND" = true ]; then
            echo "Setting up Node.js environment..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            if [ -f "package.json" ]; then
              echo "Installing JavaScript dependencies..."
              npm install
            fi
          fi

          if [ "$RUBY_FOUND" = true ]; then
            echo "Setting up Ruby environment..."
            sudo apt-get update
            sudo apt-get install -y ruby-full
            if [ -f "Gemfile" ]; then
              echo "Installing Ruby dependencies..."
              gem install bundler
              bundle install
            fi
          fi

          if [ "$PYTHON_FOUND" = true ]; then
            echo "Setting up Python environment..."
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            if [ -f "requirements.txt" ]; then
              echo "Installing Python dependencies..."
              pip3 install -r requirements.txt
            elif [ -f "Pipfile.lock" ]; then
              echo "Installing Python dependencies with pipenv..."
              pip3 install pipenv
              pipenv install
            fi
          fi

          if [ "$PHP_FOUND" = true ]; then
            echo "Setting up PHP environment..."
            sudo apt-get update
            sudo apt-get install -y php php-cli php-mbstring php-xml
            if [ -f "composer.json" ]; then
              echo "Installing PHP dependencies..."
              curl -sS https://getcomposer.org/installer | php
              php composer.phar install
            fi
          fi

          if [ "$SWIFT_FOUND" = true ]; then
            echo "Setting up Swift/Objective-C environment..."
            sudo apt-get update
            sudo apt-get install -y ruby
            gem install cocoapods
            if [ -f "Podfile" ]; then
              echo "Installing CocoaPods dependencies..."
              pod install
            fi
          fi

          if [ "$GO_FOUND" = true ]; then
            echo "Setting up Go environment..."
            sudo apt-get update
            sudo apt-get install -y golang-go
            if [ -f "go.mod" ]; then
              echo "Installing Go dependencies..."
              go mod download
            fi
          fi

          if [ "$RUST_FOUND" = true ]; then
            echo "Setting up Rust environment..."
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
            if [ -f "Cargo.toml" ]; then
              echo "Compiling Rust project..."
              cargo build
            fi
          fi

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Verify Java installation
        run: |
          echo "JAVA_HOME is set to: $JAVA_HOME"
          java -version
          which java

      - name: Fix JAVA_HOME for Docker
        run: |
          echo "JAVA_HOME=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.26-4/x64" >> $GITHUB_ENV
          echo "PATH=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.26-4/x64/bin:$PATH" >> $GITHUB_ENV

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: depcheck
        with:
          project: 'dependency-check-poc'
          path: '.'
          format: 'ALL'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired
            --noupdate

      - name: List reports directory contents
        if: always()
        run: ls -la ${{ github.workspace }}/reports

      - name: Upload Dependency Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ${{ github.workspace }}/reports

      - name: Check for vulnerabilities and create issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = '${{ github.workspace }}/reports/dependency-check-report.json';
            console.log(`Attempting to read report at: ${reportPath}`);
            if (!fs.existsSync(reportPath)) {
              console.error(`Report file not found at ${reportPath}`);
              return;
            }
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

            const vulnerabilities = report.dependencies
              .filter(dep => dep.vulnerabilities && dep.vulnerabilities.length > 0)
              .map(dep => {
                const criticalVulns = dep.vulnerabilities.filter(v => {
                  let score = -1;
                  if (v.cvssv3 && v.cvssv3.baseScore) {
                    score = v.cvssv3.baseScore;
                  } else if (v.cvssv2 && v.cvssv2.score && v.cvssv2.score !== -1.0) {
                    score = v.cvssv2.score;
                  }
                  return score >= 7;
                });
                if (criticalVulns.length > 0) {
                  let libraryName = 'Unknown';
                  if (dep.packages && dep.packages.length > 0) {
                    const packageId = dep.packages[0].id;
                    libraryName = packageId.split('@')[0].replace('pkg:gem/', '').replace('pkg:npm/', '');
                  }
                  const workspace = '${{ github.workspace }}';
                  let filePath = dep.filePath;
                  if (filePath.startsWith(workspace)) {
                    filePath = filePath.substring(workspace.length + 1);
                  }
                  const vulnDetails = criticalVulns.map(v => {
                    let score = 'Unknown';
                    if (v.cvssv3 && v.cvssv3.baseScore) {
                      score = v.cvssv3.baseScore;
                    } else if (v.cvssv2 && v.cvssv2.score) {
                      score = v.cvssv2.score;
                    }
                    return `${v.name} (CVSS: ${score})`;
                  });
                  return {
                    filePath: filePath,
                    libraryName: libraryName,
                    vulns: vulnDetails
                  };
                }
                return null;
              })
              .filter(dep => dep !== null);

            if (vulnerabilities.length > 0) {
              const issueBody = `
              ## Vulnerabilities Detected

              The Dependency-Check has identified the following vulnerabilities with CVSS >= 7:

              ${vulnerabilities.map(v => `Arquivo: ${v.filePath}\n**Biblioteca:** ${v.libraryName}\n${v.vulns.join('\n')}\n\n`).join('\n')}
              Please review the attached full report and take appropriate action.
              `;
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Critical Vulnerabilities Detected by Dependency-Check',
                body: issueBody,
                assignees: [context.actor]
              });
            } else {
              console.log('No vulnerabilities with CVSS >= 7 found.');
            }
