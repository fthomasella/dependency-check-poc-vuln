name: Dependency Check PoC

on: [push]

permissions:
  issues: write
  contents: read

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Check Test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List directory contents
        run: ls -la

      - name: Detect languages and compile
        run: |
          #!/bin/bash
          echo "Detecting languages in repository..."
          # ... (the entire script)
          # At the end, add:
          echo "GO_FOUND=$GO_FOUND" >> $GITHUB_OUTPUT
        id: detect-languages

      - name: Install govulncheck
        if: steps.detect-languages.outputs.GO_FOUND == 'true'
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        if: steps.detect-languages.outputs.GO_FOUND == 'true'
        id: govulncheck
        run: |
          govulncheck ./... > govulncheck_output.txt 2>&1 || true
          if grep -q "No vulnerabilities found" govulncheck_output.txt; then
            echo "GOVULNCHECK_FOUND=false" >> $GITHUB_OUTPUT
          else
            echo  "GOVULNCHECK_FOUND=true" >> $GITHUB_OUTPUT
          fi

      - name: Create issue for govulncheck
        if: steps.govulncheck.outputs.GOVULNCHECK_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('govulncheck_output.txt', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Go Vulnerabilities Detected',
              body: `## Go Vulnerabilities\n\n\`\`\`\n${output}\n\`\`\``,
              assignees: [context.actor]
            });

      - name: Install trufflehog
        run: |
          curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/download/v3.82.1/trufflehog_3.82.1_linux_amd64.tar.gz | tar -xz -C /usr/local/bin trufflehog

      - name: Run trufflehog
        id: trufflehog
        run: |
          trufflehog git file://. --only-verified --fail > trufflehog_output.txt 2>&1
          if [ $? -eq 183 ]; then
            echo "TRUFFLEHOG_FOUND=true" >> $GITHUB_OUTPUT
          else
            echo "TRUFFLEHOG_FOUND=false" >> $GITHUB_OUTPUT
          fi

      - name: Create issue for trufflehog
        if: steps.trufflehog.outputs.TRUFFLEHOG_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('trufflehog_output.txt', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Leaked Secrets Detected',
              body: `## Leaked Secrets\n\n\`\`\`\n ${output}\n\`\`\``,
              assignees: [context.actor]
            });

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Verify Java installation
        run: |
          echo "JAVA_HOME is set to: $JAVA_HOME"
          java -version
          which java

      - name: Fix JAVA_HOME for Docker
        run: |
          echo "JAVA_HOME=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.26-4/x64" >> $GITHUB_ENV
          echo "PATH=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.26-4/x64/bin:$PATH" >> $GITHUB_ENV

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: depcheck
        with:
          project: 'dependency-check-poc'
          path: '.'
          format: 'ALL'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired
            --noupdate

      - name: List reports directory contents
        if: always()
        run: ls -la ${{ github.workspace }}/reports

      - name: Upload Dependency Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ${{ github.workspace }}/reports

      - name: Check for vulnerabilities and create issues
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = '${{ github.workspace }}/reports/dependency-check-report.json';
            if (!fs.existsSync(reportPath)) {
              console.error(`Report file not found at ${reportPath}`);
              return;
            }
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            const workspace = '${{ github.workspace }}';
            for (const dep of report.dependencies) {
              if (dep.vulnerabilities && dep.vulnerabilities.length > 0) {
                const criticalVulns = dep.vulnerabilities.filter(v => {
                  let score = -1;
                  if (v.cvssv3 && v.cvssv3.baseScore) {
                    score = v.cvssv3.baseScore;
                  } else if (v.cvssv2 && v.cvssv2.score && v.cvssv2.score !== -1.0) {
                    score = v.cvssv2.score;
                  }
                  return score >= 7;
                });
                if (criticalVulns.length > 0) {
                  let libraryName = 'Unknown';
                  let version = 'Unknown';
                  if (dep.packages && dep.packages.length > 0) {
                    const packageId = dep.packages[0].id;
                    const [namePart, ver] = packageId.split('@');
                    libraryName = namePart.replace(/^pkg:[^\/]+\//, '');
                    version = ver;
                  }
                  let filePath = dep.filePath;
                  if (filePath.startsWith(workspace)) {
                    filePath = filePath.substring(workspace.length + 1);
                  }
                  const title = `Vulnerability in ${libraryName} version ${version}`;
                  const searchResult = await github.rest.search.issuesAndPullRequests({
                    q: `repo:${context.repo.owner}/${context.repo.repo} type:issue state:open "${title}" in:title`
                  });
                  if (searchResult.data.total_count === 0) {
                    const vulnDetails = criticalVulns.map(v => {
                      let score = 'Unknown';
                      if (v.cvssv3 && v.cvssv3.baseScore) {
                        score = v.cvssv3.baseScore;
                      } else if (v.cvssv2 && v.cvssv2.score) {
                        score = v.cvssv2.score;
                      }
                      return `${v.name} (CVSS: ${score})`;
                    }).join('\n');
                    const issueBody = `
                    ## Vulnerability in ${libraryName} version ${version}

                    File: ${filePath}

                    Vulnerabilities:
                    ${vulnDetails}

                    Please review and update the library.
                    `;
                    await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: title,
                      body: issueBody,
                      assignees: [context.actor]
                    });
                  } else {
                    console.log(`Issue already exists for ${title}`);
                  }
                }
              }
            }
