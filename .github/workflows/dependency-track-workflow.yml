name: Dependency-Track SBOM Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-track:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up JDK 17 for Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generate CycloneDX SBOM using Maven
      - name: Generate SBOM
        run: mvn org.cyclonedx:cyclonedx-maven-plugin:2.7.11:makeAggregateBom -DoutputFormat=xml

      # Upload SBOM to Dependency-Track
      - name: Upload SBOM to Dependency-Track
        uses: DependencyTrack/gh-upload-sbom@v3
        with:
          serverHostname: ${{ secrets.DEPENDENCYTRACK_SERVER }} # Ngrok URL (e.g., abc123.ngrok.io)
          apiKey: ${{ secrets.DEPENDENCYTRACK_APIKEY }} # Stored in GitHub Secrets
          projectName: 'MyProject'
          projectVersion: '1.0'
          bomFilename: 'target/bom.xml'
          autoCreate: true

      # Query Dependency-Track for vulnerabilities and fail if High or Critical are found
      - name: Check for High or Critical Vulnerabilities
        env:
          DEPENDENCYTRACK_SERVER: ${{ secrets.DEPENDENCYTRACK_SERVER }}
          DEPENDENCYTRACK_APIKEY: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          PROJECT_NAME: 'MyProject'
          PROJECT_VERSION: '1.0'
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Get project UUID from Dependency-Track
          PROJECT_UUID=$(curl -s -H "Authorization: Bearer $DEPENDENCYTRACK_APIKEY" \
            "https://$DEPENDENCYTRACK_SERVER/api/v1/project/lookup?name=$PROJECT_NAME&version=$PROJECT_VERSION" | \
            jq -r '.uuid')

          if [ -z "$PROJECT_UUID" ]; then
            echo "Error: Project not found in Dependency-Track"
            exit 1
          fi

          # Fetch vulnerabilities for the project
          VULNS=$(curl -s -H "Authorization: Bearer $DEPENDENCYTRACK_APIKEY" \
            "https://$DEPENDENCYTRACK_SERVER/api/v1/vulnerability/project/$PROJECT_UUID" | \
            jq '[.[] | select(.severity == "HIGH" or .severity == "CRITICAL")]')

          # Check if any High or Critical vulnerabilities exist
          VULN_COUNT=$(echo "$VULNS" | jq length)
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "Error: Found $VULN_COUNT High or Critical vulnerabilities:"
            echo "$VULNS" | jq -r '.[] | " - \(.vulnId) (\(.severity)): \(.description | .[:100])..."'
            exit 1
          else
            echo "No High or Critical vulnerabilities found."
          fi
