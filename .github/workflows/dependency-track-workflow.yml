name: Dependency-Track SBOM Analysis with Debug

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-track:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js (adjust version as needed)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Change to your project's Node.js version

      # Step 3: Debug secrets (check if they are set without revealing values)
      - name: Debug Secrets
        run: |
          echo "DEPENDENCYTRACK_SERVER is set: ${{ secrets.DEPENDENCYTRACK_SERVER != '' }}"
          echo "DEPENDENCYTRACK_APIKEY is set: ${{ secrets.DEPENDENCYTRACK_APIKEY != '' }}"

      # Step 4: Test connectivity to Dependency-Track server
      - name: Test Connectivity to Dependency-Track
        run: |
          curl -v https://${{ secrets.DEPENDENCYTRACK_SERVER }}/api/version
        continue-on-error: true  # Continue even if this fails to capture logs

      # Step 5: Install dependencies and generate CycloneDX SBOM
      - name: Generate SBOM
        run: |
          npm ci  # Install project dependencies
          npm install -g @cyclonedx/cyclonedx-npm
          npx cyclonedx-npm --output-format XML --output-file bom.xml

      # Step 6: Check if BOM file exists and is readable
      - name: Check BOM File
        run: |
          ls -l bom.xml || echo "BOM file not found"
          cat bom.xml || echo "BOM file is empty or unreadable"

      # Step 7: Upload SBOM with curl
      - name: Upload SBOM with curl
        run: |
          curl -X "POST" "https://${{ secrets.DEPENDENCYTRACK_SERVER }}/api/v1/bom" \
          -H "X-Api-Key: ${{ secrets.DEPENDENCYTRACK_APIKEY }}" \
          -F "autoCreate=true" \
          -F "projectName=MyProject" \
          -F "projectVersion=1.0" \
          -F "bom=@bom.xml"

      # Step 8: Wait for SBOM processing
      - name: Wait for SBOM processing
        run: sleep 30

      # Step 9: Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Step 10: Get project UUID
      - name: Get Project UUID
        id: get_uuid
        run: |
          RESPONSE=$(curl -s -H "X-Api-Key: ${{ secrets.DEPENDENCYTRACK_APIKEY }}" \
          "https://${{ secrets.DEPENDENCYTRACK_SERVER }}/api/v1/project/lookup?name=MyProject&version=1.0")
          echo "Response: $RESPONSE"
          UUID=$(echo $RESPONSE | jq -r '.uuid')
          if [ -z "$UUID" ]; then
            echo "Project not found"
            exit 1
          fi
          echo "uuid=$UUID" >> $GITHUB_OUTPUT

      # Step 11: Check for high or critical vulnerabilities
      - name: Check Vulnerabilities
        run: |
          UUID=${{ steps.get_uuid.outputs.uuid }}
          VULNS=$(curl -s -H "X-Api-Key: ${{ secrets.DEPENDENCYTRACK_APIKEY }}" \
          "https://${{ secrets.DEPENDENCYTRACK_SERVER }}/api/v1/vulnerability/project/$UUID" | \
          jq '[.[] | select(.severity == "HIGH" or .severity == "CRITICAL")]')
          COUNT=$(echo $VULNS | jq length)
          if [ $COUNT -gt 0 ]; then
            echo "Found $COUNT high or critical vulnerabilities:"
            echo $VULNS | jq .
            exit 1
          else
            echo "No high or critical vulnerabilities found."
          fi
