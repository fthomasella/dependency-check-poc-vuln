name: Dependabot Security Check

on:
  push:
    branches:
      - main

jobs:
  check-dependabot-alerts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get commit details
        id: commit
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          commit_data=$(curl -s -H "Authorization: Bearer $PAT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}")
          author_name=$(echo "$commit_data" | jq -r '.commit.author.name')
          author_username=$(echo "$commit_data" | jq -r '.author.login // ""')
          echo "author_name=$author_name" >> $GITHUB_OUTPUT
          echo "author_username=$author_username" >> $GITHUB_OUTPUT
          echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Check if package.json was modified
        id: check-files
        run: |
          modified_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          if echo "$modified_files" | grep -q "package.json"; then
            echo "modified=true" >> $GITHUB_OUTPUT
          else
            echo "modified=false" >> $GITHUB_OUTPUT
          fi

      - name: Fetch Dependabot alerts
        id: fetch-alerts
        if: steps.check-files.outputs.modified == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          alerts=$(curl -s -H "Authorization: Bearer $PAT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/dependabot/alerts?state=open")
          echo "alerts=$alerts" >> $GITHUB_OUTPUT
          if [ "$alerts" == "[]" ]; then
            echo "has_alerts=false" >> $GITHUB_OUTPUT
          else
            echo "has_alerts=true" >> $GITHUB_OUTPUT
          fi

      - name: Create issue for open alerts
        if: steps.fetch-alerts.outputs.has_alerts == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          alerts="${{ steps.fetch-alerts.outputs.alerts }}"
          # Parse the first alert for demonstration
          description=$(echo "$alerts" | jq -r '.[0].security_advisory.description')
          vuln_id=$(echo "$alerts" | jq -r '.[0].number')
          package=$(echo "$alerts" | jq -r '.[0].dependency.package.name')

          echo "Vulnerabilidade encontrada: $package (Alerta #$vuln_id)"

          # Get author details
          author_name="${{ steps.commit.outputs.author_name }}"
          author_username="${{ steps.commit.outputs.author_username }}"

          # Build issue data
          issue_data=$(jq -n \
            --arg title "Vulnerabilidade Dependabot #$vuln_id ainda presente" \
            --arg body "Descrição do Dependabot:\n\n$description\n\nAssociada ao commit: ${{ steps.commit.outputs.sha }}\nResponsável: $author_name" \
            --arg assignee "$author_username" \
            '{title: $title, body: $body} + (if $assignee != "" then {assignees: [$assignee]} else {} end)')

          # Create the issue
          curl -s -X POST \
            -H "Authorization: Bearer $PAT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues" \
            -d "$issue_data"
